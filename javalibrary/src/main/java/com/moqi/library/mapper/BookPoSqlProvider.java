package com.moqi.library.mapper;

import com.moqi.library.mapper.po.BookPoExample.Criteria;
import com.moqi.library.mapper.po.BookPoExample.Criterion;
import com.moqi.library.mapper.po.BookPoExample;
import com.moqi.library.mapper.po.BookPoWithBLOBs;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class BookPoSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Book
     *
     * @mbg.generated
     */
    public String insertSelective(BookPoWithBLOBs row) {
        SQL sql = new SQL();
        sql.INSERT_INTO("Book");
        
        if (row.getIsbn() != null) {
            sql.VALUES("`isbn`", "#{isbn,jdbcType=VARCHAR}");
        }
        
        if (row.getBookName() != null) {
            sql.VALUES("`book_name`", "#{bookName,jdbcType=VARCHAR}");
        }
        
        if (row.getAuthor() != null) {
            sql.VALUES("`author`", "#{author,jdbcType=VARCHAR}");
        }
        
        if (row.getPress() != null) {
            sql.VALUES("`press`", "#{press,jdbcType=VARCHAR}");
        }
        
        if (row.getPressDate() != null) {
            sql.VALUES("`press_date`", "#{pressDate,jdbcType=DATE}");
        }
        
        if (row.getPressPlace() != null) {
            sql.VALUES("`press_place`", "#{pressPlace,jdbcType=VARCHAR}");
        }
        
        if (row.getPrice() != null) {
            sql.VALUES("`price`", "#{price,jdbcType=DECIMAL}");
        }
        
        if (row.getClcCode() != null) {
            sql.VALUES("`clc_code`", "#{clcCode,jdbcType=VARCHAR}");
        }
        
        if (row.getClcName() != null) {
            sql.VALUES("`clc_name`", "#{clcName,jdbcType=VARCHAR}");
        }
        
        if (row.getBinding() != null) {
            sql.VALUES("`binding`", "#{binding,jdbcType=CHAR}");
        }
        
        if (row.getLanguage() != null) {
            sql.VALUES("`language`", "#{language,jdbcType=VARCHAR}");
        }
        
        if (row.getFormat() != null) {
            sql.VALUES("`format`", "#{format,jdbcType=VARCHAR}");
        }
        
        if (row.getStatus() != null) {
            sql.VALUES("`status`", "#{status,jdbcType=CHAR}");
        }
        
        if (row.getCreatedAt() != null) {
            sql.VALUES("`created_at`", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getUpdatedAt() != null) {
            sql.VALUES("`updated_at`", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getPictures() != null) {
            sql.VALUES("`pictures`", "#{pictures,jdbcType=LONGVARCHAR}");
        }
        
        if (row.getBookDesc() != null) {
            sql.VALUES("`book_desc`", "#{bookDesc,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Book
     *
     * @mbg.generated
     */
    public String selectByExampleWithBLOBs(BookPoExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("`id`");
        } else {
            sql.SELECT("`id`");
        }
        sql.SELECT("`isbn`");
        sql.SELECT("`book_name`");
        sql.SELECT("`author`");
        sql.SELECT("`press`");
        sql.SELECT("`press_date`");
        sql.SELECT("`press_place`");
        sql.SELECT("`price`");
        sql.SELECT("`clc_code`");
        sql.SELECT("`clc_name`");
        sql.SELECT("`binding`");
        sql.SELECT("`language`");
        sql.SELECT("`format`");
        sql.SELECT("`status`");
        sql.SELECT("`created_at`");
        sql.SELECT("`updated_at`");
        sql.SELECT("`pictures`");
        sql.SELECT("`book_desc`");
        sql.FROM("Book");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Book
     *
     * @mbg.generated
     */
    public String selectByExample(BookPoExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("`id`");
        } else {
            sql.SELECT("`id`");
        }
        sql.SELECT("`isbn`");
        sql.SELECT("`book_name`");
        sql.SELECT("`author`");
        sql.SELECT("`press`");
        sql.SELECT("`press_date`");
        sql.SELECT("`press_place`");
        sql.SELECT("`price`");
        sql.SELECT("`clc_code`");
        sql.SELECT("`clc_name`");
        sql.SELECT("`binding`");
        sql.SELECT("`language`");
        sql.SELECT("`format`");
        sql.SELECT("`status`");
        sql.SELECT("`created_at`");
        sql.SELECT("`updated_at`");
        sql.FROM("Book");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Book
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BookPoWithBLOBs row = (BookPoWithBLOBs) parameter.get("row");
        BookPoExample example = (BookPoExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("Book");
        
        if (row.getId() != null) {
            sql.SET("`id` = #{row.id,jdbcType=BIGINT}");
        }
        
        if (row.getIsbn() != null) {
            sql.SET("`isbn` = #{row.isbn,jdbcType=VARCHAR}");
        }
        
        if (row.getBookName() != null) {
            sql.SET("`book_name` = #{row.bookName,jdbcType=VARCHAR}");
        }
        
        if (row.getAuthor() != null) {
            sql.SET("`author` = #{row.author,jdbcType=VARCHAR}");
        }
        
        if (row.getPress() != null) {
            sql.SET("`press` = #{row.press,jdbcType=VARCHAR}");
        }
        
        if (row.getPressDate() != null) {
            sql.SET("`press_date` = #{row.pressDate,jdbcType=DATE}");
        }
        
        if (row.getPressPlace() != null) {
            sql.SET("`press_place` = #{row.pressPlace,jdbcType=VARCHAR}");
        }
        
        if (row.getPrice() != null) {
            sql.SET("`price` = #{row.price,jdbcType=DECIMAL}");
        }
        
        if (row.getClcCode() != null) {
            sql.SET("`clc_code` = #{row.clcCode,jdbcType=VARCHAR}");
        }
        
        if (row.getClcName() != null) {
            sql.SET("`clc_name` = #{row.clcName,jdbcType=VARCHAR}");
        }
        
        if (row.getBinding() != null) {
            sql.SET("`binding` = #{row.binding,jdbcType=CHAR}");
        }
        
        if (row.getLanguage() != null) {
            sql.SET("`language` = #{row.language,jdbcType=VARCHAR}");
        }
        
        if (row.getFormat() != null) {
            sql.SET("`format` = #{row.format,jdbcType=VARCHAR}");
        }
        
        if (row.getStatus() != null) {
            sql.SET("`status` = #{row.status,jdbcType=CHAR}");
        }
        
        if (row.getCreatedAt() != null) {
            sql.SET("`created_at` = #{row.createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getUpdatedAt() != null) {
            sql.SET("`updated_at` = #{row.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getPictures() != null) {
            sql.SET("`pictures` = #{row.pictures,jdbcType=LONGVARCHAR}");
        }
        
        if (row.getBookDesc() != null) {
            sql.SET("`book_desc` = #{row.bookDesc,jdbcType=LONGVARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Book
     *
     * @mbg.generated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("Book");
        
        sql.SET("`id` = #{row.id,jdbcType=BIGINT}");
        sql.SET("`isbn` = #{row.isbn,jdbcType=VARCHAR}");
        sql.SET("`book_name` = #{row.bookName,jdbcType=VARCHAR}");
        sql.SET("`author` = #{row.author,jdbcType=VARCHAR}");
        sql.SET("`press` = #{row.press,jdbcType=VARCHAR}");
        sql.SET("`press_date` = #{row.pressDate,jdbcType=DATE}");
        sql.SET("`press_place` = #{row.pressPlace,jdbcType=VARCHAR}");
        sql.SET("`price` = #{row.price,jdbcType=DECIMAL}");
        sql.SET("`clc_code` = #{row.clcCode,jdbcType=VARCHAR}");
        sql.SET("`clc_name` = #{row.clcName,jdbcType=VARCHAR}");
        sql.SET("`binding` = #{row.binding,jdbcType=CHAR}");
        sql.SET("`language` = #{row.language,jdbcType=VARCHAR}");
        sql.SET("`format` = #{row.format,jdbcType=VARCHAR}");
        sql.SET("`status` = #{row.status,jdbcType=CHAR}");
        sql.SET("`created_at` = #{row.createdAt,jdbcType=TIMESTAMP}");
        sql.SET("`updated_at` = #{row.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("`pictures` = #{row.pictures,jdbcType=LONGVARCHAR}");
        sql.SET("`book_desc` = #{row.bookDesc,jdbcType=LONGVARCHAR}");
        
        BookPoExample example = (BookPoExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Book
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("Book");
        
        sql.SET("`id` = #{row.id,jdbcType=BIGINT}");
        sql.SET("`isbn` = #{row.isbn,jdbcType=VARCHAR}");
        sql.SET("`book_name` = #{row.bookName,jdbcType=VARCHAR}");
        sql.SET("`author` = #{row.author,jdbcType=VARCHAR}");
        sql.SET("`press` = #{row.press,jdbcType=VARCHAR}");
        sql.SET("`press_date` = #{row.pressDate,jdbcType=DATE}");
        sql.SET("`press_place` = #{row.pressPlace,jdbcType=VARCHAR}");
        sql.SET("`price` = #{row.price,jdbcType=DECIMAL}");
        sql.SET("`clc_code` = #{row.clcCode,jdbcType=VARCHAR}");
        sql.SET("`clc_name` = #{row.clcName,jdbcType=VARCHAR}");
        sql.SET("`binding` = #{row.binding,jdbcType=CHAR}");
        sql.SET("`language` = #{row.language,jdbcType=VARCHAR}");
        sql.SET("`format` = #{row.format,jdbcType=VARCHAR}");
        sql.SET("`status` = #{row.status,jdbcType=CHAR}");
        sql.SET("`created_at` = #{row.createdAt,jdbcType=TIMESTAMP}");
        sql.SET("`updated_at` = #{row.updatedAt,jdbcType=TIMESTAMP}");
        
        BookPoExample example = (BookPoExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Book
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(BookPoWithBLOBs row) {
        SQL sql = new SQL();
        sql.UPDATE("Book");
        
        if (row.getIsbn() != null) {
            sql.SET("`isbn` = #{isbn,jdbcType=VARCHAR}");
        }
        
        if (row.getBookName() != null) {
            sql.SET("`book_name` = #{bookName,jdbcType=VARCHAR}");
        }
        
        if (row.getAuthor() != null) {
            sql.SET("`author` = #{author,jdbcType=VARCHAR}");
        }
        
        if (row.getPress() != null) {
            sql.SET("`press` = #{press,jdbcType=VARCHAR}");
        }
        
        if (row.getPressDate() != null) {
            sql.SET("`press_date` = #{pressDate,jdbcType=DATE}");
        }
        
        if (row.getPressPlace() != null) {
            sql.SET("`press_place` = #{pressPlace,jdbcType=VARCHAR}");
        }
        
        if (row.getPrice() != null) {
            sql.SET("`price` = #{price,jdbcType=DECIMAL}");
        }
        
        if (row.getClcCode() != null) {
            sql.SET("`clc_code` = #{clcCode,jdbcType=VARCHAR}");
        }
        
        if (row.getClcName() != null) {
            sql.SET("`clc_name` = #{clcName,jdbcType=VARCHAR}");
        }
        
        if (row.getBinding() != null) {
            sql.SET("`binding` = #{binding,jdbcType=CHAR}");
        }
        
        if (row.getLanguage() != null) {
            sql.SET("`language` = #{language,jdbcType=VARCHAR}");
        }
        
        if (row.getFormat() != null) {
            sql.SET("`format` = #{format,jdbcType=VARCHAR}");
        }
        
        if (row.getStatus() != null) {
            sql.SET("`status` = #{status,jdbcType=CHAR}");
        }
        
        if (row.getCreatedAt() != null) {
            sql.SET("`created_at` = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getUpdatedAt() != null) {
            sql.SET("`updated_at` = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getPictures() != null) {
            sql.SET("`pictures` = #{pictures,jdbcType=LONGVARCHAR}");
        }
        
        if (row.getBookDesc() != null) {
            sql.SET("`book_desc` = #{bookDesc,jdbcType=LONGVARCHAR}");
        }
        
        sql.WHERE("`id` = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Book
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, BookPoExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}